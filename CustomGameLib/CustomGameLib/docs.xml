<doc>
  <exceptions>
    <invalidslot>
      <exception cref="Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot"/> is not a valid slot.</exception>
    </invalidslot>
  </exceptions>
  <getMaps>
    All maps:
    <div id="mapList"></div>
    <script>getMaps();</script>
  </getMaps>
  <commands>
    <example>
      The code below will allow the players in the server to vote for a map.
      <code>
      using System;
      using System.Linq;
      using System.Threading;
      using System.Collections.Generic;
      using Deltin.CustomGameAutomation;

      public class MapVoting
      {
          private static Map[] Maps = new Map[]
          {
              Map.TDM_Antarctica,
              Map.TDM_Dorado,
              Map.TDM_Lijiang_Garden,
              Map.TDM_Petra,
              Map.TDM_Nepal_Shrine,
              Map.TDM_Hanamura
          };
          private static string[] MapNames = new string[]
          {
              "Antarctica",
              "Dorado",
              "Lijiang Garden",
              "Petra",
              "Nepal Shrine",
              "Hanamura"
          };

          public static void VoteForMap(CustomGame cg, ModesEnabled modesEnabled, Event overwatchEvent)
          {
              Random rnd = new Random();
              int[] votemap = new int[VoteCount]; // The index of maps that can be voted for. 3 is the amount of maps chosen that can be voted for.
              for (int i = 0; i &lt; votemap.Length; i++)
              {
                  int choose;
                  while (true)
                  {
                      // Make sure there are no duplicates when choosing the next map to be added to the votemap array
                      choose = rnd.Next(Maps.Length);
                      if (votemap.Contains(choose))
                          continue;
                      break;
                  }
                  votemap[i] = choose;
              }

              string type = FormatMessage(
                  "Vote for map! (15 seconds)",
                  MapNames[votemap[0]] + " - $VOTE 1",
                  MapNames[votemap[1]] + " - $VOTE 2",
                  MapNames[votemap[2]] + " - $VOTE 3");
              cg.Chat.SendChatMessage(type);

              // Start listening to the "$VOTE" command.
              cg.Commands.ListenTo.Add(new ListenTo("$VOTE", true, false, OnVote));
              // Listen for chat commands for 15 seconds.
              cg.Commands.Listen = true;
              Thread.Sleep(15000);
              cg.Commands.Listen = false;
              // Get results
              int[] results = new int[VoteCount]
              {
                  VoteResults.Count(vr =&gt; vr.VotingFor == 1),
                  VoteResults.Count(vr =&gt; vr.VotingFor == 2),
                  VoteResults.Count(vr =&gt; vr.VotingFor == 3),
              };

              int winningmap = votemap[Array.IndexOf(results, results.Max())];

              // Dispose all chat identities.
              foreach (Vote voteResult in VoteResults) voteResult.ChatIdentity.Dispose();
              VoteResults = new List&lt;Vote&gt;();

              // Print the results to the chat
              cg.Chat.SendChatMessage(String.Format("{0}: {1} votes, {2}: {3} votes, {4}: {5} votes", MapNames[votemap[0]], results[0], MapNames[votemap[1]], results[1], MapNames[votemap[2]], results[2]));
              cg.Chat.SendChatMessage("Next map: " + MapNames[winningmap]);
              cg.ToggleMap(modesEnabled, overwatchEvent, ToggleAction.DisableAll, Maps[winningmap]);
          }

          private static void OnVote(CommandData commandData)
          {
              // converts a string like "$VOTE 2" to an integer 2.
              if (int.TryParse(commandData.Command.Split(' ').ElementAtOrDefault(1), out int voteFor)
                  &amp;&amp; 1 &lt;= voteFor &amp;&amp; voteFor &lt;= VoteCount)
              {
                  for (int i = 0; i &lt; VoteResults.Count; i++)
                      if (ChatIdentity.CompareChatIdentities(commandData.ChatIdentity, VoteResults[i].ChatIdentity))
                      {
                          Console.WriteLine(string.Format("Player #{0} changing their vote to: {1}", i, voteFor));
                          VoteResults[i].VotingFor = voteFor;
                          return;
                      }

                  Console.WriteLine(string.Format("New vote from player #{0}: {1}", VoteResults.Count, voteFor));
                  VoteResults.Add(new Vote(voteFor, commandData.ChatIdentity));
              }
          }

          private const int VoteCount = 3;
          private static List&lt;Vote&gt; VoteResults = new List&lt;Vote&gt;();
          private class Vote
          {
              public Vote(int votingFor, ChatIdentity chatIdentity)
              {
                  VotingFor = votingFor;
                  ChatIdentity = chatIdentity;
              }

              public int VotingFor = -1;
              public ChatIdentity ChatIdentity;
          }

          private static string FormatMessage(params string[] text)
          {
              string newLine = string.Concat(Enumerable.Repeat("\u3000", 30));

              string result = "";
              for (int i = 0; i &lt; text.Length; i++)
              {
                  if (i &lt; text.Length - 1)
                      result += text[i] + " " + (text[i].Length * 0.80 &lt; newLine.Length ? newLine.Substring((int)(text[i].Length * 0.80)) : "");
                  else
                      result += text[i];
              }

              return result;
          }
      }
      </code>
      The code below will allow a player to volunteer for a team
      <code>
      using System;
      using System.Collections.Generic;
      using Deltin.CustomGameAutomation;

      public class Volunteer
      {
          public static void VolunteerForTeam(CustomGame cg, PlayerTeam team)
          {
              CG = cg;
              Team = team;
              // Get the player identities.
              Players = GetPlayers(cg);

              cg.Chat.SendChatMessage("Teams are unbalanced, type \"$VOLUNTEER\" (case sensitive) to join the " + Team.ToString() + " team.");

              // Add the $VOLUNTEER command
              cg.Commands.ListenTo.Add(new ListenTo(
                  command:"$VOLUNTEER", 
                  listen:true, 
                  registerProfile:true, 
                  callback:OnVolunteer));

              cg.Commands.Listen = true;

              Console.WriteLine("Now listening for volunteers. Press enter to exit.");
              Console.ReadLine();
          }

          private static void OnVolunteer(CommandData commandData)
          {
              for (int i = 0; i &lt; Players.Length; i++)
                  // If the executor is found
                  if (PlayerIdentity.ComparePlayerIdentities(Players[i].Identity, commandData.PlayerIdentity)
                      &amp;&amp; ((Team == PlayerTeam.Blue &amp;&amp; !CustomGame.IsSlotBlue(Players[i].Slot)) || (Team == PlayerTeam.Red &amp;&amp; !CustomGame.IsSlotRed(Players[i].Slot)))
                      )
                  {
                      if (Team == PlayerTeam.Blue)
                          CG.Interact.SwapToBlue(Players[i].Slot);
                      else if (Team == PlayerTeam.Red)
                          CG.Interact.SwapToRed(Players[i].Slot);
                  }
          }

          private static Player[] GetPlayers(CustomGame cg)
          {
              List&lt;int&gt; slotsToGet = cg.GetSlots(SlotFlags.BlueTeam | SlotFlags.RedTeam | SlotFlags.Spectators | SlotFlags.NoAI);
              List&lt;Player&gt; players = new List&lt;Player&gt;();

              for (int i = 0; i &lt; slotsToGet.Count; i++)
                  players.Add(new Player(slotsToGet[i], cg.Commands.GetSlotIdentity(slotsToGet[i])));

              return players.ToArray();
          }

          static CustomGame CG;
          static Player[] Players;
          static PlayerTeam Team;
      }

      class Player
      {
          public Player(int slot, PlayerIdentity identity)
          {
              Slot = slot;
              Identity = identity;
          }
          public int Slot;
          public PlayerIdentity Identity;
      }
      </code>
    </example>
  </commands>
  <AddAI>
    <example>
      The code below will even out the teams with AI if the teams are unbalanced.
      <code>
      using Deltin.CustomGameAutomation;
      using System;
      using System.Linq;

      public class AddAIExample
      {
          const int PlayerCountDifference = 1;

          public static void EvenPlayerTeams(CustomGame cg)
          {
              cg.AI.CalibrateAIChecking();

              int dif = cg.BlueCount - cg.RedCount; // Will be positive if blue has more players and negative if red has more players.

              if (Math.Abs(dif) &lt; PlayerCountDifference)
                  return;

              if (dif &lt; 0) // Red has more players  
              {
                  // Remove extra AI from red
                  int[] redAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotRed(aiSlot)).ToArray();
                  for (int i = 0; i &lt; redAI.Length &amp;&amp; i &lt; -dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(redAI[i]))
                          dif++;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Blue, -dif);
              }
              else if (dif &gt; 0) // Blue has more players
              {
                  // Remove extra AI from blue
                  int[] blueAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotBlue(aiSlot)).ToArray();
                  for (int i = 0; i &lt; blueAI.Length &amp;&amp; i &lt; dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(blueAI[i]))
                          dif--;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Red, dif);
              }
          }
      }
      </code>
    </example>
  </AddAI>
</doc>