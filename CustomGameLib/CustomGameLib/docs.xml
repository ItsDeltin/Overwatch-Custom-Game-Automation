<doc>
  <exceptions>
    <invalidslot>
      <exception cref="Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot"/> is not a valid slot.</exception>
    </invalidslot>
  </exceptions>
  <getMaps>
    All maps:
    <div id="mapList"></div>
    <script>getMaps();</script>
  </getMaps>
  <commands>
    <example>
      The code below will allow the players in the server to vote for a map.
      <code>
      using System;
      using System.Collections.Generic;
      using System.Linq;
      using System.Threading;
      using Deltin.CustomGameAutomation;

      class MapVoting
      {
          private static readonly ListenTo VoteCommand = new ListenTo(&quot;$VOTE&quot;, true, false, false, OnVote);

          public static Map VoteForMap(CustomGame cg, Map[] maps)
          {
              cg.Commands.Listen = true;

              Random rnd = new Random();

              int[] votemap = new int[VoteCount]; // The index of maps that can be voted for. 3 is the amount of maps chosen that can be voted for.
              for (int i = 0; i &lt; votemap.Length; i++)
              {
                  int choose;
                  while (true)
                  {
                      // Make sure there are no duplicates when choosing the next map to be added to the votemap array
                      choose = rnd.Next(maps.Length);
                      if (votemap.Contains(choose))
                          continue;
                      break;
                  }
                  votemap[i] = choose;
              }

              // Send the maps to vote for to the chat.
              cg.Chat.SendChatMessage(FormatMessage(
                  &quot;Vote for map! (15 seconds)&quot;,
                  maps[votemap[0]].ShortName + &quot; - $VOTE 1&quot;,
                  maps[votemap[1]].ShortName + &quot; - $VOTE 2&quot;,
                  maps[votemap[2]].ShortName + &quot; - $VOTE 3&quot;));

              // Listen to the &quot;$VOTE&quot; command for 15 seconds.
              cg.Commands.ListenTo.Add(VoteCommand);
              Thread.Sleep(15000);
              cg.Commands.ListenTo.Remove(VoteCommand);
              // Get results
              int[] results = new int[VoteCount]
              {
              VoteResults.Count(vr =&gt; vr.VotingFor == 1),
              VoteResults.Count(vr =&gt; vr.VotingFor == 2),
              VoteResults.Count(vr =&gt; vr.VotingFor == 3)
              };

              int winningmap = votemap[Array.IndexOf(results, results.Max())];

              // Dispose all chat identities.
              foreach (Vote voteResult in VoteResults) voteResult.ChatIdentity.Dispose();
              VoteResults = new List&lt;Vote&gt;();

              // Print the results to the chat
              string mapResults = String.Format(&quot;{0}: {1} votes, {2}: {3} votes, {4}: {5} votes&quot;,
                  maps[votemap[0]].ShortName, results[0],
                  maps[votemap[1]].ShortName, results[1],
                  maps[votemap[2]].ShortName, results[2]);
              cg.Chat.SendChatMessage(mapResults);

              Console.WriteLine(mapResults);
              cg.Chat.SendChatMessage(&quot;Next map: &quot; + maps[winningmap].ShortName);
              cg.ToggleMap(ToggleAction.DisableAll, maps[winningmap]);

              return maps[winningmap];
          }

          private static void OnVote(CommandData commandData)
          {
              // converts a string like &quot;$VOTE 2&quot; to an integer 2.
              if (int.TryParse(commandData.Command.Split(' ').ElementAtOrDefault(1), out int voteFor)
                  &amp;&amp; 1 &lt;= voteFor &amp;&amp; voteFor &lt;= VoteCount) // If the number is a valid map to vote for.
              {
                  // Test if the player already voted for a map. If they did, update the map they are voting for.
                  for (int i = 0; i &lt; VoteResults.Count; i++)
                      if (commandData.ChatIdentity.CompareIdentities(VoteResults[i].ChatIdentity))
                      {
                          Console.WriteLine(string.Format(&quot;Player #{0} changing their vote to: {1}&quot;, i, voteFor));
                          VoteResults[i].VotingFor = voteFor;
                          return;
                      }

                  // If they didn't already vote for a map, add their vote to the VoteResults list.

                  Console.WriteLine(string.Format(&quot;New vote from player #{0}: {1}&quot;, VoteResults.Count, voteFor));
                  VoteResults.Add(new Vote(voteFor, commandData.ChatIdentity));
              }
          }

          private static string FormatMessage(params string[] text)
          {
              string newLine = string.Concat(Enumerable.Repeat(&quot;\u3000&quot;, 30));

              string result = &quot;&quot;;
              for (int i = 0; i &lt; text.Length; i++)
              {
                  if (i &lt; text.Length - 1)
                      result += text[i] + &quot; &quot; + (text[i].Length * 0.80 &lt; newLine.Length ? newLine.Substring((int)(text[i].Length * 0.80)) : &quot;&quot;);
                  else
                      result += text[i];
              }

              return result;
          }

          private const int VoteCount = 3;
          private static List&lt;Vote&gt; VoteResults = new List&lt;Vote&gt;();
          private class Vote
          {
              public Vote(int votingFor, ChatIdentity chatIdentity)
              {
                  VotingFor = votingFor;
                  ChatIdentity = chatIdentity;
              }

              public int VotingFor = -1;
              public ChatIdentity ChatIdentity;
          }
      }
      </code>
      The code below will allow a player to volunteer for a team
      <code>
      using System;
      using System.Collections.Generic;
      using System.Threading;
      using System.Threading.Tasks;
      using Deltin.CustomGameAutomation;

      public class Volunteer
      {
          public static void VolunteerForTeam(CustomGame cg, Team team)
          {
              // Get the player identities.
              PlayerTracker playerTracker = new PlayerTracker();

              Task.Run(() =&gt; 
              {
                  while (true)
                  {
                      cg.TrackPlayers(playerTracker);
                      Thread.Sleep(10);
                  }
              });

              cg.Chat.SendChatMessage(&quot;Teams are unbalanced, type \&quot;$VOLUNTEER\&quot; (case sensitive) to join the &quot; + team.ToString() + &quot; team.&quot;);

              // Add the $VOLUNTEER command
              cg.Commands.ListenTo.Add(new ListenTo(
                  command:&quot;$VOLUNTEER&quot;, 
                  listen:true, 
                  registerProfile:true, 
                  checkIfFriend:false,
                  callback:(commandData) =&gt; OnVolunteer(commandData, cg, team, playerTracker)));

              cg.Commands.Listen = true;

              Console.WriteLine(&quot;Now listening for volunteers. Press enter to exit.&quot;);
              Console.ReadLine();
          }

          private static void OnVolunteer(CommandData commandData, CustomGame cg, Team team, PlayerTracker playerTracker)
          {
              int slot = playerTracker.SlotFromPlayerIdentity(commandData.PlayerIdentity);
              if (slot == -1)
                  return;
            
              if ((team == Team.Blue &amp;&amp; !CustomGame.IsSlotBlue(slot)) || (team == Team.Red &amp;&amp; !CustomGame.IsSlotRed(slot)))
              {
                  cg.Interact.SwapTeam(slot);
              }
          }
      }
      </code>
    </example>
  </commands>
  <AddAI>
    <example>
      The code below will even out the teams with AI if the teams are unbalanced.
      <code>
      using Deltin.CustomGameAutomation;
      using System;
      using System.Linq;

      public class AddAIExample
      {
          const int PlayerCountDifference = 1;

          public static void EvenPlayerTeams(CustomGame cg)
          {
              cg.AI.CalibrateAIChecking();

              int dif = cg.BlueCount - cg.RedCount; // Will be positive if blue has more players and negative if red has more players.

              if (Math.Abs(dif) &lt; PlayerCountDifference)
                  return;

              if (dif &lt; 0) // Red has more players  
              {
                  // Remove extra AI from red
                  int[] redAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotRed(aiSlot)).ToArray();
                  for (int i = 0; i &lt; redAI.Length &amp;&amp; i &lt; -dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(redAI[i]))
                          dif++;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Blue, -dif);
              }
              else if (dif &gt; 0) // Blue has more players
              {
                  // Remove extra AI from blue
                  int[] blueAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotBlue(aiSlot)).ToArray();
                  for (int i = 0; i &lt; blueAI.Length &amp;&amp; i &lt; dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(blueAI[i]))
                          dif--;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Red, dif);
              }
          }
      }
      </code>
    </example>
  </AddAI>
  <setHeroRoster>
    <example>
      The example below will enable random heroes for a team.
      <code>
      using System;
      using System.Collections.Generic;
      using System.Linq;
      using Deltin.CustomGameAutomation;

      public class SetHeroRosterExample
      {
          public static void ChooseRandomHeroes(CustomGame cg, Team team, int randomHeroCount)
          {
              Random rnd = new Random();
              int heroCount = Enum.GetNames(typeof(Hero)).Length - 1;

              List&lt;Hero&gt; chooseHeroes = new List&lt;Hero&gt;();
              while (chooseHeroes.Count &lt; randomHeroCount)
              {
                  int heroID = rnd.Next(heroCount);
                  if (chooseHeroes.Select(hero =&gt; (int)hero).Contains(heroID))
                      continue;
                  chooseHeroes.Add((Hero)heroID);
              }

              cg.SetHeroRoster(ToggleAction.DisableAll, team, chooseHeroes.ToArray());
          }
      }
      </code>
    </example>
  </setHeroRoster>
  <setHeroSettings>
    <example>
      The code below will make blue spawn with ultimates and have infinite ultimate duration, and give red 200% movement speed and 50% movement gravity.
      <code>
      using Deltin.CustomGameAutomation;

      public class SetHeroSettingsExample
      {
          public void SetHeroValues(CustomGame cg)
          {
              cg.SetHeroSettings
              (
                  // Make blue spawn with ultimates and have infinite ultimate duration.
                  new SetHero(
                      null, // General is null
                      Team.Blue,
                      new string[] { "spawn_with_ultimate_ready", "infinite_ultimate_duration" },
                      new object[] { true, true }
                  )
                  // Give red 200% movement speed and 50% movement gravity.
                  , new SetHero(
                      null,
                      Team.Red,
                      new string[] { "movement_speed", "movement_gravity" },
                      new object[] { 200, 50 }
                  )
              );
          }
      }
      </code>
      The code below will make torbjorn on either team use hammer only and mercy on red use her staff.
      <code>
      using Deltin.CustomGameAutomation;
            
      public class SetHeroSettingsExample
      {
          public void SetHeroValues(CustomGame cg)
          {
              cg.SetHeroSettings
              (
                  // Make torbjorn only allowed to use his hammer.
                  new SetHero(
                      Hero.Torbjorn, // Torbjorn
                      BotTeam.Both, // On both teams
                      new string[] { "weapons_enabled" },
                      new object[] { 2 } // 0 = All, 1 = Rivet gun only, 2 = Forge hammer only.
                  )
                  // Make mercy on red only allowed to use her staff.
                  , new SetHero(
                      Hero.Mercy, // Mercy
                      BotTeam.Red, // On red
                      new string[] { "weapons_enabled" },
                      new object[] { 1 } // 0 = All, 1 = Caduceus staff only, 2 = Caduceus blaster only
                  )
              );
          }
      }
      </code>
    </example>
  </setHeroSettings>
  <SendChatMessage>
    <example>
      The code below will send a message to the chat when a player joins.
      <code>
      using Deltin.CustomGameAutomation;
      using System.Threading;
    
      public class SendChatMessageExample
      {
          public static void SendChatMessageWhenPlayerJoins(CustomGame cg)
          {
              int previousPlayerCount = cg.AllCount;
              while (true)
              {
                  // If the last recorded player count does not equal the current player count, send a message to the chat.
                  int playerCount = cg.AllCount;
                  if (playerCount &gt; previousPlayerCount)
                  {
                      cg.Chat.SendChatMessage("Welcome to my custom game!");
                      previousPlayerCount = playerCount;
                  }

                  Thread.Sleep(100);
              }
          }
      }
      </code>
    </example>
  </SendChatMessage>
  <PlayersDead>
    <example>
      The code below will award a point to a team if they get a kill.
      <code>
      using System;
      using System.Collections.Generic;
      using System.Threading;
      using Deltin.CustomGameAutomation;
            
      public class PlayersDeadExample
      {
          public static void AwardTeamOnKill(CustomGame cg)
          {
              bool[] awarded = new bool[12];
        
              int redpoints = 0;
              int bluepoints = 0;
        
              while (true)
              {
                  List&lt;int&gt; playersdead = cg.PlayerInfo.GetDeadSlots();
                  for (int i = 0; i &lt; 12; i++)
                  {
                      if (playersdead.Contains(i) &amp;&amp; awarded[i] == false)
                      {
                          if (cg.IsSlotBlue(i))
                          {
                              redpoints++;
                              Console.WriteLine("Red points: {0}", redpoints);
                          }
                          else if (cg.IsSlotRed(i))
                          {
                              bluepoints++;
                              Console.WriteLine("Blue points: {0}", bluepoints);
                          }
                          awarded[i] = true;
                      }
                      else if (playersdead.Contains(i) == false &amp;&amp; awarded[i])
                      {
                          awarded[i] = false;
                      }
                  }
                  Thread.Sleep(500);
              }
          }
      }
      </code>
    </example>
  </PlayersDead>
  <ToggleMap1>
    <example>
      The code below will disable all maps but Hanamura, Gibraltar, and Ilios.
      <code>
      using Deltin.CustomGameAutomation;

      public class ToggleMapExample
      {
          public static void SetEnabledMaps(CustomGame cg)
          {
              cg.ModesEnabled = Gamemode.Assault | Gamemode.AssaultEscort | Gamemode.Control | Gamemode.Escort;
              cg.CurrentOverwatchEvent = Event.None;
              cg.ToggleMap(ToggleAction.DisableAll, Map.A_Hanamura, Map.E_Gibraltar, Map.C_Ilios);
          }
      }
      </code>
    </example>
  </ToggleMap1>
  <ToggleMap2>
    <example>
      The code below will disable all maps but Hanamura, Gibraltar, and Ilios.
      <code>
      using Deltin.CustomGameAutomation;

      public class ToggleMapExample
      {
          public static void SetEnabledMaps(CustomGame cg)
          {
              cg.ToggleMap(Gamemode.Assault | Gamemode.AssaultEscort | Gamemode.Control | Gamemode.Escort,
                  Event.None,
                  ToggleAction.DisableAll, 
                  Map.A_Hanamura, Map.E_Gibraltar, Map.C_Ilios);
          }
      }
      </code>
    </example>
  </ToggleMap2>
  <OnGameOver>
    <example>
      The example below will send a message to chat when the game is over.
      <code>
      using Deltin.CustomGameAutomation;

      public class OnGameOverExample
      {
          public static void SendMessageToChatWhenGameIsOver(CustomGame cg)
          {
              cg.Settings.SetTeamName(Team.Blue, @"\ Blue Team");
              cg.Settings.SetTeamName(Team.Red, "* Red Team");
              cg.OnGameOver += Cg_OnGameOver;
          }

          private static void Cg_OnGameOver(object sender, GameOverArgs e)
          {
              Team winningTeam = e.GetWinningTeam();
              ((CustomGame)sender).Chat.SendChatMessage(string.Format("The game is over, Team {0} has won!", winningTeam.ToString()));
          }
      }
      </code>
    </example>
  </OnGameOver>
  <lockHandler>
    <summary>
      Locks functions in the CustomGame class.
    </summary>
    <remarks>
      <para>
        Passive locks is for functions that scan the Overwatch window but do not interact with it.
        Any amount of passive locks will run side by side.
        Usage:
        <code>using (CustomGame.<see cref="LockHandler.Passive"/>)</code>
      </para>
      <para>
        Semi-Interactive locks is for functions that interact with the Overwatch window but do not go into any other menues allowing scanning to continue as normal.
        Only 1 semi-interactive lock will run at a time.
        Usage:
        <code>using (CustomGame.<see cref="LockHandler.SemiInteractive"/>)</code>
      </para>
      <para>
        Interactive locks is for functions that interact with the Overwatch window and go into new menus. This will block passive locks from running during the interactive lock.
        Only 1 interactive lock will run at a time.
        Usage:
        <code>using (CustomGame.<see cref="LockHandler.Interactive"/>)</code>
      </para>
      <para>
        A deadlock will occur if LockHandler.Passive, LockHandler.Interactive, or LockHandler.SemiInteractive are accessed outside of a using() statement.

        The following will also cause a deadlock:
        <code>using (CustomGame.LockHandler.Interactive)
{
  Parallel.For(0, 10, (i) =>
  {
    using (CustomGame.LockHandler...)
    {
      // ...
    }
  });
}</code>
        Because the first using statement is waiting for Parallel.For to complete, and the second using statement is waiting for the first using statement to release the lock.
      </para>
    </remarks>
  </lockHandler>
</doc>