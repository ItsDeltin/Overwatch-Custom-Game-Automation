<doc>
  <exceptions>
    <invalidslot>
      <exception cref="Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot"/> is not a valid slot.</exception>
    </invalidslot>
  </exceptions>
  <getMaps>
    All maps:
    <div id="mapList"></div>
    <script>getMaps();</script>
  </getMaps>
  <commands>
    <example>
      The code below will allow the players in the server to vote for a map.
      <code>
      using System;
      using System.Linq;
      using System.Threading;
      using Deltin.CustomGameAutomation;

      public class MapVoting
      {
          private static Map[] Maps = new Map[]
          {
              Map.TDM_Antarctica,
              Map.TDM_Dorado,
              Map.TDM_Lijiang_Garden,
              Map.TDM_Petra,
              Map.TDM_Nepal_Shrine,
              Map.TDM_Hanamura
          };
          private static string[] MapNames = new string[]
          {
              "Antarctica",
              "Dorado",
              "Lijiang Garden",
              "Petra",
              "Nepal Shrine",
              "Hanamura"
          };

          public static void VoteForMap(CustomGame cg)
          {
              Random rnd = new Random();
              int[] votemap = new int[3]; // The index of maps that can be voted for. 3 is the amount of maps chosen that can be voted for.
              for (int i = 0; i &lt; votemap.Length; i++)
              {
                  int choose;
                  while (true)
                  {
                      // Make sure there are no duplicates when choosing the next map to be added to the votemap array
                      choose = rnd.Next(Maps.Length);
                      if (votemap.Contains(choose))
                          continue;
                      break;
                  }
                  votemap[i] = choose;
              }
              string type = "Vote for map! (15 seconds)                                      " + MapNames[votemap[0]] + " - $VOTE 1                               " + MapNames[votemap[1]] + " - $VOTE 2                               " + MapNames[votemap[2]] + " - $VOTE 3";
              cg.Chat.SendChatMessage(type);

              // Start listening to the "$VOTE" command.
              cg.Commands.ListenTo.Add(new ListenTo("$VOTE", true, false));
              // Listen for chat commands for 15 seconds.
              cg.Commands.Listen = true;
              Thread.Sleep(15000);
              cg.Commands.Listen = false;
              // Get results
              int[] results = new int[3];
              var commands = cg.Commands.ExecutedCommands;
              for (int i = 0; i &lt; commands.Count; i++)
              {
                  string[] commandSplit = commands[i].Command.Split(' ');
                  if (commandSplit.Length &gt;= 2 &amp;&amp; commandSplit[0] == "$VOTE")
                  {
                      int votefor = Int32.Parse(commands[i].Command.Split(' ')[1]) - 1;
                      if (votefor &gt;= 0 &amp;&amp; votefor &lt; results.Length)
                          results[votefor]++;
                  }
              }
              int winningmap = votemap[results.ToList().IndexOf(results.Max())];
              cg.Commands.DisposeAllExecutedCommands();
              // Print the results to the chat
              cg.Chat.SendChatMessage(String.Format("{0}: {1} votes, {2}: {3} votes, {4}: {5} votes", MapNames[votemap[0]], results[0], MapNames[votemap[1]], results[1], MapNames[votemap[2]], results[2]));
              cg.Chat.SendChatMessage("Next map: " + MapNames[winningmap]);
              cg.ToggleMap(ToggleAction.DisableAll, Maps[winningmap]);
          }
      }
      </code>
      The code below will allow a player to volunteer to be a boss.
    </example>
  </commands>
  <AddAI>
    <example>
      The code below will even out the teams with AI if the teams are unbalanced.
      <code>
      using Deltin.CustomGameAutomation;
      using System;
      using System.Linq;

      public class AddAIExample
      {
          const int PlayerCountDifference = 1;

          public static void EvenPlayerTeams(CustomGame cg)
          {
              cg.AI.CalibrateAIChecking();

              int dif = cg.BlueCount - cg.RedCount; // Will be positive if blue has more players and negative if red has more players.

              if (Math.Abs(dif) &lt; PlayerCountDifference)
                  return;

              if (dif &lt; 0) // Red has more players  
              {
                  // Remove extra AI from red
                  int[] redAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotRed(aiSlot)).ToArray();
                  for (int i = 0; i &lt; redAI.Length &amp;&amp; i &lt; -dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(redAI[i]))
                          dif++;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Blue, -dif);
              }
              else if (dif &gt; 0) // Blue has more players
              {
                  // Remove extra AI from blue
                  int[] blueAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotBlue(aiSlot)).ToArray();
                  for (int i = 0; i &lt; blueAI.Length &amp;&amp; i &lt; dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(blueAI[i]))
                          dif--;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Red, dif);
              }
          }
      }
      </code>
    </example>
  </AddAI>
</doc>