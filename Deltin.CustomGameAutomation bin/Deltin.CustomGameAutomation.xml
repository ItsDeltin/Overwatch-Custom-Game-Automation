<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deltin.CustomGameAutomation</name>
    </assembly>
    <members>
        <member name="T:Deltin.CustomGameAutomation.CustomGame">
            <summary>
            Automates Overwatch's custom games.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.AI">
            <summary>
            AI settings for Overwatch.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Chat">
            <summary>
            Chat for Overwatch.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Commands">
            <summary>
            Chat commands for Overwatch.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.CreateOverwatchProcess(Deltin.CustomGameAutomation.OverwatchProcessInfo)">
            <summary>
            Creates a new Overwatch process.
            </summary>
            <param name="processInfo">The info of the process being started.</param>
            <returns>The main window handle of the Overwatch process.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.#ctor(Deltin.CustomGameAutomation.CustomGameBuilder)">
            <summary>
            Creates new CustomGame object.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.SetupOverwatchWindow">
            <summary>
            Positions the Overwatch window to be usable by the CustomGame class.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.DisableOverwatchWindowInput">
            <summary>
            Disables input for the Overwatch window.
            </summary>
            <remarks>
            Input must be re-enabled with <see cref="M:Deltin.CustomGameAutomation.CustomGame.EnableOverwatchWindowInput"/>.
            </remarks>
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.EnableOverwatchWindowInput"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.EnableOverwatchWindowInput">
            <summary>
            Enables input for the Overwatch window after disabling it with <see cref="M:Deltin.CustomGameAutomation.CustomGame.DisableOverwatchWindowInput"/>.
            </summary>
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.DisableOverwatchWindowInput"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.GetGameState">
            <summary>
            Returns the state of the game.
            <para>In lobby: GameState.InLobby</para>
            <para>Waiting for players: GameState.Waiting</para>
            <para>Ingame: GameState.Ingame</para>
            <para>Commending players: GameState.Ending_Commend</para>
            </summary>
            <returns>Returns the state of the game.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.Dispose">
            <summary>
            Disposes of all resources being used by the CustomGame instance.
            </summary>
        </member>
        <member name="E:Deltin.CustomGameAutomation.CustomGame.OnGameOver">
            <summary>
            Events that are executed when the game is over.
            To get the winning team, blue team must have "\" on the start of their name, and red needs "*" on the start of their name.
            </summary>
            <example>
            The example below will send a message to chat when the game is over.
            <code>
            using Deltin.CustomGameAutomation;
            
            public class OnGameOverExample
            {
                public static void SendMessageToChatWhenGameIsOver(CustomGame cg)
                {
                    cg.GameSettings.SetTeamName(PlayerTeam.Blue, "\ Blue Team");
                    cg.GameSettings.SetTeamName(PlayerTeam.Red, "* Red Team");
                    cg.OnGameOver += Cg_OnGameOver;
                }
                
                private static void Cg_OnGameOver(object sender, GameOverArgs e)
                {
                    PlayerTeam winningTeam = e.GetWinningTeam();
                    (sender as CustomGame).Chat.Chat(string.Format("The game is over, Team {0} has won!", winningTeam.ToString()));
                }
            }
            </code>
            </example>
            <seealso cref="M:Deltin.CustomGameAutomation.GameOverArgs.GetWinningTeam"/>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Pause">
            <summary>
            Controls Overwatch's pause feature.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.PlayerCount">
            <summary>
            Get player count of red team and blue team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.PlayerSlots">
            <summary>
            Gets the slots filled in red team and blue team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.BlueCount">
            <summary>
            Gets the player count of blue team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.BlueSlots">
            <summary>
            Gets the slots filled in blue team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.RedCount">
            <summary>
            Gets the player count of red team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.RedSlots">
            <summary>
            Gets the slots filled in red team.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.QueueCount">
            <summary>
            Gets the number of players in the queue.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.QueueSlots">
            <summary>
            Gets the slots filled in the queue.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.SpectatorCount">
            <summary>
            Gets the number of players in spectator.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.SpectatorSlots">
            <summary>
            Gets the slots filled in spectator excluding the first slot.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.GetInvitedCount">
            <summary>
            Gets the number of players who were invited but are not ingame.
            </summary>
            <returns>Number of players who are not ingame.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.GetInvitedSlots">
            <summary>
            Gets a list of players who were invited but are not ingame.
            </summary>
            <returns>Integer list of players who are not ingame.</returns>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.TotalPlayerCount">
            <summary>
            Gets the total amount of players in the custom game server.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CustomGame.TotalPlayerSlots">
            <summary>
            Gets all the slots of every player in the custom game server. Does not include players in queue.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.IsSlotValid(System.Int32)">
            <summary>
            Returns true if the slot is blue, red, spectator, or in queue.
            </summary>
            <param name="slot">Slot to check</param>
            <returns></returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.IsSlotBlue(System.Int32)">
            <summary>
            Returns true if the slot is in blue.
            </summary>
            <param name="slot">Slot to check</param>
            <returns></returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.IsSlotRed(System.Int32)">
            <summary>
            Returns true if the slot is in red.
            </summary>
            <param name="slot">Slot to check</param>
            <returns></returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.IsSlotSpectator(System.Int32)">
            <summary>
            Returns true if the slot is in Spectator.
            </summary>
            <param name="slot">Slot to check</param>
            <returns></returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.IsSlotInQueue(System.Int32)">
            <summary>
            Returns true if the slot is in queue.
            </summary>
            <param name="slot">Slot to check</param>
            <returns></returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.GetSlots(Deltin.CustomGameAutomation.SlotFlags)">
            <summary>
            Gets slots in the game.
            </summary>
            <param name="flags">Flags for obtaining slots.</param>
            <returns>Returns a list of slots following <paramref name="flags"/>.</returns>
            <example>
            The code below will write all blue players that are not AI to the console.
            <code>
            CustomGame cg = new CustomGame();
            
            List&lt;int&gt; bluePlayerSlots = cg.GetSlots(SlotFlags.Blue | SlotFlags.NoAI);
            
            Console.WriteLine(string.Join(", ", bluePlayerSlots));
            </code>
            The code below will write all AI queueing for red to the console.
            <code>
            CustomGame cg = new CustomGame();
            
            List&lt;int&gt; redQueueAISlots = cg.GetSlots(SlotFlags.NoPlayers | SlotFlags.RedQueue);
            
            Console.WriteLine(string.Join(", ", redQueueAISlots));
            </code>
            </example>
            <seealso cref="T:Deltin.CustomGameAutomation.SlotFlags"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.WaitForSlotUpdate(System.Int32)">
            <summary>
            Waits for the slots in overwatch to change.
            </summary>
            <param name="maxtime">Time to wait. Set to -1 to wait forever.</param>
            <returns>Returns true if Overwatch's slots changed. Returns false if the time ran out.</returns>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.PlayerInfo">
            <summary>
            Info about players in an Overwatch custom game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Queueid">
            <summary>
            The number where the queue starts.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Interact">
            <summary>
            Changes a player's state in Overwatch.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.InvitePlayer(System.String,Deltin.CustomGameAutomation.InviteTeam)">
            <summary>
            Invites a player to the game via battletag.
            </summary>
            <param name="playerName">Battletag of the player to invite. Is case sensitive. Ex: Tracer#1818</param>
            <param name="team">Team that the invited player joins.</param>
            <returns>Returns true if <paramref name="playerName"/> is a valid battletag.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="playerName"/> is null.</exception>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.ModesEnabled">
            <summary>
            Modes enabled in custom games.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.CurrentOverwatchEvent">
            <summary>
            The current event occuring in Overwatch.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.GetCurrentOverwatchEvent">
            <summary>
            Gets the current Overwatch event. This compares the current date with past event's start and end times, so specific time may be a little off.
            </summary>
            <returns>The current Overwatch event as the Event enum.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.ToggleMap(Deltin.CustomGameAutomation.ToggleAction,Deltin.CustomGameAutomation.Map[])">
            <summary>
            Toggles maps in Overwatch.
            </summary>
            <param name="ta">Determines if all maps should be enabled, disabled or neither before toggling.</param>
            <param name="maps">Maps that should be toggled.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <see cref="F:Deltin.CustomGameAutomation.CustomGame.ModesEnabled" /> is null.</exception>
            <remarks>
            <see cref="F:Deltin.CustomGameAutomation.CustomGame.ModesEnabled" /> must be set to use this method. <see cref="F:Deltin.CustomGameAutomation.CustomGame.CurrentOverwatchEvent" /> must be set if a seasonal Overwatch event is on.
            <getMaps>
    All maps:
    <div id="mapList" />
    <script>getMaps();</script>
  </getMaps>
            </remarks>
            <example>
            The code below will disable all maps but Hanamura, Gibraltar, and Ilios.
            <code>
            using Deltin.CustomGameAutomation;
            
            public class ToggleMapExample
            {
                public static void SetEnabledMaps(CustomGame cg) 
                {
                    cg.ModesEnabled = new ModesEnabled()
                    {
                        Assault = true,
                        AssaultEscort = true,
                        Control = true,
                        Escort = true
                    }
                    cg.CurrentOverwatchEvent = Event.None;
                    cg.ToggleMap(ToggleAction.DisableAll, Map.A_Hanamura, E_Gibraltar, C_Ilios);
                }
            }
            </code>
            </example>
            <seealso cref="T:Deltin.CustomGameAutomation.Map" />
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.ToggleMap(Deltin.CustomGameAutomation.ModesEnabled,Deltin.CustomGameAutomation.Event,Deltin.CustomGameAutomation.ToggleAction,Deltin.CustomGameAutomation.Map[])" />
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.ToggleMap(Deltin.CustomGameAutomation.ModesEnabled,Deltin.CustomGameAutomation.Event,Deltin.CustomGameAutomation.ToggleAction,Deltin.CustomGameAutomation.Map[])">
            <summary>
            Toggles maps in Overwatch.
            </summary>
            <param name="modesEnabled">The modes enabled in the overwatch game.</param>
            <param name="currentOverwatchEvent">The current Overwatch event.</param>
            <param name="ta">Determines if all maps should be enabled, disabled or neither before toggling.</param>
            <param name="maps">Maps that should be toggled.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="modesEnabled" /> is null.</exception>
            <remarks>
            <getMaps>
    All maps:
    <div id="mapList" />
    <script>getMaps();</script>
  </getMaps>
            </remarks>
            <example>
            The code below will disable all maps but Hanamura, Gibraltar, and Ilios.
            <code>
            using Deltin.CustomGameAutomation;
            
            public class ToggleMapExample
            {
                public static void SetEnabledMaps(CustomGame cg) 
                {
                    cg.ToggleMap(
                        new ModesEnabled() 
                        {
                            Assault = true,
                            AssaultEscort = true,
                            Control = true,
                            Escort = true
                        },
                        Event.None,
                        ToggleAction.DisableAll, 
                        Map.A_Hanamura, E_Gibraltar, C_Ilios);
                }
            }
            </code>
            </example>
            <seealso cref="T:Deltin.CustomGameAutomation.Map" />
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.ToggleMap(Deltin.CustomGameAutomation.ToggleAction,Deltin.CustomGameAutomation.Map[])" />
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.SaveScreenshot(System.String)">
            <summary>
            Takes a screenshot of the Overwatch window and saves it as an image to the specified path.
            </summary>
            <param name="path">Path to save screenshot to.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.BackToMenu">
            <summary>
            Go back to executing position.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.LoadStall">
            <summary>
            Stalls the program to wait for the map to finish loading.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.RestartGame">
            <summary>
            Restarts the game.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.StartGame">
            <summary>
            Starts the game.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.SendServerToLobby">
            <summary>
            Sends server to the lobby.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.StartGamemode">
            <summary>
            Starts the game when waiting for players.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.SetHeroRoster(Deltin.CustomGameAutomation.ToggleAction,Deltin.CustomGameAutomation.BotTeam,Deltin.CustomGameAutomation.Hero[])">
            <summary>
            Toggles what heroes can be selected.
            </summary>
            <param name="ta">Determines if all heroes should be enabled, disabled or neither before toggling</param>
            <param name="team">Team to change roster for.</param>
            <param name="heroes">Heroes to toggle.</param>
            <example>
            The example below will enable random heroes for a team.
            <code>
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using Deltin.CustomGameAutomation;
            
            public class SetHeroRosterExample
            {
                public static void ChooseRandomHeroes(CustomGame cg, BotTeam team, int randomHeroCount)
                {
                    Random rnd = new Random();
                    int heroCount = Enum.GetNames(typeof(MyEnum)).Length - 1;
                    
                    List&lt;Hero&gt; chooseHeroes = new List&lt;Hero&gt;();
                    while (chooseHeroes.Count &lt; randomHeroCount)
                    {
                        int heroID = rnd.Next(heroCount);
                        if (chooseHeroes.Select(v => v as int).Contains(heroID))
                            continue;
                        chooseHeroes.Add(heroID as Hero);
                    }
                    
                    cg.SetHeroRoster(ToggleAction.DisableAll, team, chooseHeroes.ToArray());
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGame.SetHeroSettings(Deltin.CustomGameAutomation.SetHero[])">
            <summary>
            Change individual hero settings.
            </summary>
            <param name="herodata">Settings of the heroes you want to change.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when a <paramref name="herodata"/>'s set and setto length are not equal length.</exception>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSetheroException">Thrown when any of the settings do not exist for their respective heros or if a set's respective setto is not the correct type.</exception>
            <remarks>
            The complete list of settings can be found <a href="https://github.com/ItsDeltin/Overwatch-Custom-Game-Automation/blob/master/CustomGameLib/CustomGameLib/Resources/hero_settings.txt" content="here."/>
            Toggle settings require a boolean. Value and dropdown settings require an integer.
            </remarks>
            <example>
            The code below will make blue spawn with ultimates and have infinite ultimate duration, and give red 200% movement speed and 50% movement gravity.
            <code>
            using Deltin.CustomGameAutomation;
            
            public class SetHeroSettingsExample
            {
                public void SetHeroValues(CustomGame cg)
                {
                    cg.SetHeroSettings
                    (
                        // Make blue spawn with ultimates and have infinite ultimate duration.
                        new SetHero(
                            null, // General is null
                            BotTeam.Blue,
                            new string[] { "spawn_with_ultimate_ready", "infinite_ultimate_duration" },
                            new object[] { true,                         true }
                        )
                        // Give red 200% movement speed and 50% movement gravity.
                        , new SetHero(
                            null,
                            BotTeam.Red,
                            new string[] { "movement_speed", "movement_gravity" },
                            new object[] { 200,              50 }
                        )
                    );
                }
            }
            </code>
            The code below will make torbjorn on either team use hammer only and mercy on red use her staff.
            <code>
            using Deltin.CustomGameAutomation;
            
            public class SetHeroSettingsExample
            {
                public void SetHeroValues(CustomGame cg)
                {
                    cg.SetHeroSettings
                    (
                        // Make torbjorn only allowed to use his hammer.
                        new SetHero(
                            Hero.Torbjorn, // Torbjorn
                            BotTeam.Both, // On both teams
                            new string[] { "weapons_enabled" },
                            new object[] { 2 } // 0 = All, 1 = Rivet gun only, 2 = Forge hammer only.
                        )
                        // Make mercy on red only allowed to use her staff.
                        , new SetHero(
                            Hero.Mercy, // Mercy
                            BotTeam.Red, // On red
                            new string[] { "weapons_enabled" },
                            new object[] { 1 } // 0 = All, 1 = Caduceus staff only, 2 = Caduceus blaster only
                        )
                    );
                }
            }
            </code>
            </example>
            <seealso cref="T:Deltin.CustomGameAutomation.SetHero"/>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGame.Settings">
            <summary>
            Custom Game settings in Overwatch.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.AI">
            <summary>
            AI settings for Overwatch.
            </summary>
            <remarks>
            The AI class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.AI"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.AddAI(Deltin.CustomGameAutomation.AIHero,Deltin.CustomGameAutomation.Difficulty,Deltin.CustomGameAutomation.BotTeam,System.Int32)">
            <summary>
            Add AI to the game.
            </summary>
            <param name="hero">Hero type to add.</param>
            <param name="difficulty">Difficulty of hero.</param>
            <param name="team">Team that AI joins.</param>
            <param name="count">Amount of AI that is added. Set to -1 for max. Default is -1</param>
            <returns>Returns false if no AI can be added.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if count is less than -1.</exception>
            <example>
      The code below will even out the teams with AI if the teams are unbalanced.
      <code>
      using Deltin.CustomGameAutomation;
      using System;
      using System.Linq;

      public class AddAIExample
      {
          const int PlayerCountDifference = 1;

          public static void EvenPlayerTeams(CustomGame cg)
          {
              cg.AI.CalibrateAIChecking();

              int dif = cg.BlueCount - cg.RedCount; // Will be positive if blue has more players and negative if red has more players.

              if (Math.Abs(dif) &lt; PlayerCountDifference)
                  return;

              if (dif &lt; 0) // Red has more players  
              {
                  // Remove extra AI from red
                  int[] redAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotRed(aiSlot)).ToArray();
                  for (int i = 0; i &lt; redAI.Length &amp;&amp; i &lt; -dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(redAI[i]))
                          dif++;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Blue, -dif);
              }
              else if (dif &gt; 0) // Blue has more players
              {
                  // Remove extra AI from blue
                  int[] blueAI = cg.AI.GetAISlots().Where(aiSlot =&gt; cg.IsSlotBlue(aiSlot)).ToArray();
                  for (int i = 0; i &lt; blueAI.Length &amp;&amp; i &lt; dif; i++)
                      if (cg.AI.RemoveFromGameIfAI(blueAI[i]))
                          dif--;

                  if (dif != 0)
                      cg.AI.AddAI(AIHero.Recommended, Difficulty.Hard, BotTeam.Red, dif);
              }
          }
      }
      </code>
    </example>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.GetAIDifficultyMarkup(System.Int32,System.String)">
            <summary>
            Obtains the markup of an AI's difficulty.
            </summary>
            <param name="scalar">Garanteed index of difficulty. (0 = easy, 1 = medium, 2 = hard)</param>
            <param name="saveAt">Location to save markup at.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.GetAIDifficulty(System.Int32,System.Boolean)">
            <summary>
            Gets the difficulty of the AI in the input slot.
            <para>If the input slot is not an AI, returns null.
            If checking an AI's difficulty in the queue, it will always return easy, or null if it is a player.</para>
            </summary>
            <param name="slot">Slot to check</param>
            <param name="noUpdate" />
            <returns>Returns the if the difficulty is found. Returns null if the input slot is not an AI.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.RemoveAllBotsAuto">
            <summary>
            Removes all AI from the game.
            </summary>
            <returns>Returns true if successful.</returns>
            <seealso cref="M:Deltin.CustomGameAutomation.Interact.RemoveAllBots(System.Int32)"/>
            <seealso cref="M:Deltin.CustomGameAutomation.AI.RemoveFromGameIfAI(System.Int32)"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.IsAI(System.Int32,System.Boolean)">
            <summary>
            Checks if the input slot is an AI.
            </summary>
            <param name="slot">Slot to check.</param>
            <param name="noUpdate">Determines if the captured screen should be updated before scanning.</param>
            <returns>Returns true if slot is AI.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.AccurateIsAI(System.Int32)">
            <summary>
            Checks if the input slot is an AI.
            </summary>
            <remarks>
            IsAI() is faster but requires calling CalibrateAIChecking() beforehand. However this is more accurate and does not require calling CalibrateAIChecking().
            </remarks>
            <param name="slot">Slot to check.</param>
            <returns>Returns true if slot is AI.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
            <seealso cref="M:Deltin.CustomGameAutomation.AI.IsAI(System.Int32,System.Boolean)" />
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.GetAISlots(System.Boolean)">
            <summary>
            Gets all slots that are AI.
            </summary>
            <returns>All AI slots.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.GetPlayerSlots(System.Boolean)">
            <summary>
            Gets all slots that are not AI.
            </summary>
            <returns>All player slots.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.CalibrateAIChecking">
            <summary>
            AI checking is determined by looking for the commendation icon of players. Sometimes, this icon is missing. This fixes it.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.EditAI(System.Int32,Deltin.CustomGameAutomation.AIHero,Deltin.CustomGameAutomation.Difficulty)">
            <summary>
            Edits the hero an AI is playing and the difficulty of the AI.
            </summary>
            <param name="slot">Slot to edit.</param>
            <param name="setToHero">Hero to change to.</param>
            <param name="setToDifficulty">Difficulty to change to.</param>
            <returns>Returns true on success.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.EditAI(System.Int32,Deltin.CustomGameAutomation.AIHero)">
            <summary>
            Edits the hero an AI is playing.
            </summary>
            <param name="slot">Slot to edit.</param>
            <param name="setToHero">Hero to change to.</param>
            <returns>Returns true on success.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.EditAI(System.Int32,Deltin.CustomGameAutomation.Difficulty)">
            <summary>
            Edits the difficulty of an AI.
            </summary>
            <param name="slot">Slot to edit.</param>
            <param name="setToDifficulty">Difficulty to change to.</param>
            <returns>Returns true on success.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.AI.RemoveFromGameIfAI(System.Int32)">
            <summary>
            Safely removes a slot from the game if they are an AI.
            </summary>
            <param name="slot">Slot to remove from game.</param>
            <returns>Returns true if the slot is an AI and removing them from the game was successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
            <seealso cref="M:Deltin.CustomGameAutomation.AI.RemoveAllBotsAuto" />
            <seealso cref="M:Deltin.CustomGameAutomation.Interact.RemoveFromGame(System.Int32)" />
        </member>
        <member name="T:Deltin.CustomGameAutomation.AIHero">
            <summary>
            AI heroes.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Recommended">
            <summary>
            Overwatch's reccommended AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Ana">
            <summary>
            Ana AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Bastion">
            <summary>
            Bastion AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Lucio">
            <summary>
            Lucio AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.McCree">
            <summary>
            McCree AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Mei">
            <summary>
            Mei AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Reaper">
            <summary>
            Reaper AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Roadhog">
            <summary>
            Roadhog AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Soldier76">
            <summary>
            Soldier 76 AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Sombra">
            <summary>
            Sombra AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Torbjorn">
            <summary>
            Torbjorn AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Zarya">
            <summary>
            Zarya AI hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.AIHero.Zenyatta">
            <summary>
            Zenyatta AI hero.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Difficulty">
            <summary>
            AI difficulties.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Difficulty.Easy">
            <summary>
            Easy AI difficulty.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Difficulty.Medium">
            <summary>
            Medium AI difficulty.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Difficulty.Hard">
            <summary>
            Hard AI difficulty.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Chat">
            <summary>
            Chat for Overwatch.
            </summary>
            <remarks>
            The Chat class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.Chat"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Chat.SendChatMessage(System.String)">
            <summary>
            Send message to chat.
            </summary>
            <param name="text">Text to send.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is null.</exception>
            <example>
            The code below will send a message to the chat when a player joins.
            <code>
            using System.Threading;
            using Deltin.CustomGameAutomation;
            
            class ChatExample
            {
                public static void SendMessageWhenPlayerJoins(CustomGame cg)
                {
                    int previousPlayerCount = cg.TotalPlayerCount;
                    while (true)
                    {
                        // If the last recorded player count does not equal the current player count, send a message to the chat.
                        int playerCount = cg.TotalPlayerCount;
                        if (playerCount != previousPlayerCount)
                        {
                            cg.Chat.Chat("Welcome to my custom game!");
                            previousPlayerCount = playerCount;
                        }
                        
                        Thread.Sleep(100);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Chat.BlockGeneralChat">
            <summary>
            Prevents chat messages from being sent to the general channel.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Chat.SwapChannel(Deltin.CustomGameAutomation.Channel)">
            <summary>
            Swaps to a chat channel.
            </summary>
            <param name="channel">Channel to join</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Chat.LeaveChannel(Deltin.CustomGameAutomation.Channel)">
            <summary>
            Leaves a channel so no chat messages can be sent or recieved on that channel.
            </summary>
            <param name="channel">Channel to leave.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Chat.JoinChannel(Deltin.CustomGameAutomation.Channel)">
            <summary>
            Joins a channel after leaving it with LeaveChannel.
            </summary>
            <param name="channel">Channel to rejoin.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Channel">
            <summary>
            Chat channels for Overwatch.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Channel.Team">
            <summary>
            The team chat channel.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Channel.Match">
            <summary>
            The match chat channel.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Channel.General">
            <summary>
            The general chat channel.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Channel.Group">
            <summary>
            The group chat channel.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Channel.PrivateMessage">
            <summary>
            The private message chat channel.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Commands">
            <summary>
            Chat commands for Overwatch.
            </summary>
            <remarks>
            The Commands class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.Commands" /> field.
            </remarks>
            <example>
      The code below will allow the players in the server to vote for a map.
      <code>
      using System;
      using System.Linq;
      using System.Threading;
      using System.Collections.Generic;
      using Deltin.CustomGameAutomation;

      public class MapVoting
      {
          private static Map[] Maps = new Map[]
          {
              Map.TDM_Antarctica,
              Map.TDM_Dorado,
              Map.TDM_Lijiang_Garden,
              Map.TDM_Petra,
              Map.TDM_Nepal_Shrine,
              Map.TDM_Hanamura
          };
          private static string[] MapNames = new string[]
          {
              "Antarctica",
              "Dorado",
              "Lijiang Garden",
              "Petra",
              "Nepal Shrine",
              "Hanamura"
          };

          public static void VoteForMap(CustomGame cg, ModesEnabled modesEnabled, Event overwatchEvent)
          {
              Random rnd = new Random();
              int[] votemap = new int[VoteCount]; // The index of maps that can be voted for. 3 is the amount of maps chosen that can be voted for.
              for (int i = 0; i &lt; votemap.Length; i++)
              {
                  int choose;
                  while (true)
                  {
                      // Make sure there are no duplicates when choosing the next map to be added to the votemap array
                      choose = rnd.Next(Maps.Length);
                      if (votemap.Contains(choose))
                          continue;
                      break;
                  }
                  votemap[i] = choose;
              }

              string type = FormatMessage(
                  "Vote for map! (15 seconds)",
                  MapNames[votemap[0]] + " - $VOTE 1",
                  MapNames[votemap[1]] + " - $VOTE 2",
                  MapNames[votemap[2]] + " - $VOTE 3");
              cg.Chat.SendChatMessage(type);

              // Start listening to the "$VOTE" command.
              cg.Commands.ListenTo.Add(new ListenTo("$VOTE", true, false, OnVote));
              // Listen for chat commands for 15 seconds.
              cg.Commands.Listen = true;
              Thread.Sleep(15000);
              cg.Commands.Listen = false;
              // Get results
              int[] results = new int[VoteCount]
              {
                  VoteResults.Count(vr =&gt; vr.VotingFor == 1),
                  VoteResults.Count(vr =&gt; vr.VotingFor == 2),
                  VoteResults.Count(vr =&gt; vr.VotingFor == 3),
              };

              int winningmap = votemap[Array.IndexOf(results, results.Max())];

              // Dispose all chat identities.
              foreach (Vote voteResult in VoteResults) voteResult.ChatIdentity.Dispose();
              VoteResults = new List&lt;Vote&gt;();

              // Print the results to the chat
              cg.Chat.SendChatMessage(String.Format("{0}: {1} votes, {2}: {3} votes, {4}: {5} votes", MapNames[votemap[0]], results[0], MapNames[votemap[1]], results[1], MapNames[votemap[2]], results[2]));
              cg.Chat.SendChatMessage("Next map: " + MapNames[winningmap]);
              cg.ToggleMap(modesEnabled, overwatchEvent, ToggleAction.DisableAll, Maps[winningmap]);
          }

          private static void OnVote(CommandData commandData)
          {
              // converts a string like "$VOTE 2" to an integer 2.
              if (int.TryParse(commandData.Command.Split(' ').ElementAtOrDefault(1), out int voteFor)
                  &amp;&amp; 1 &lt;= voteFor &amp;&amp; voteFor &lt;= VoteCount)
              {
                  for (int i = 0; i &lt; VoteResults.Count; i++)
                      if (ChatIdentity.CompareChatIdentities(commandData.ChatIdentity, VoteResults[i].ChatIdentity))
                      {
                          Console.WriteLine(string.Format("Player #{0} changing their vote to: {1}", i, voteFor));
                          VoteResults[i].VotingFor = voteFor;
                          return;
                      }

                  Console.WriteLine(string.Format("New vote from player #{0}: {1}", VoteResults.Count, voteFor));
                  VoteResults.Add(new Vote(voteFor, commandData.ChatIdentity));
              }
          }

          private const int VoteCount = 3;
          private static List&lt;Vote&gt; VoteResults = new List&lt;Vote&gt;();
          private class Vote
          {
              public Vote(int votingFor, ChatIdentity chatIdentity)
              {
                  VotingFor = votingFor;
                  ChatIdentity = chatIdentity;
              }

              public int VotingFor = -1;
              public ChatIdentity ChatIdentity;
          }

          private static string FormatMessage(params string[] text)
          {
              string newLine = string.Concat(Enumerable.Repeat("\u3000", 30));

              string result = "";
              for (int i = 0; i &lt; text.Length; i++)
              {
                  if (i &lt; text.Length - 1)
                      result += text[i] + " " + (text[i].Length * 0.80 &lt; newLine.Length ? newLine.Substring((int)(text[i].Length * 0.80)) : "");
                  else
                      result += text[i];
              }

              return result;
          }
      }
      </code>
      The code below will allow a player to volunteer for a team
      <code>
      using System;
      using System.Collections.Generic;
      using Deltin.CustomGameAutomation;

      public class Volunteer
      {
          public static void VolunteerForTeam(CustomGame cg, PlayerTeam team)
          {
              CG = cg;
              Team = team;
              // Get the player identities.
              Players = GetPlayers(cg);

              cg.Chat.SendChatMessage("Teams are unbalanced, type \"$VOLUNTEER\" (case sensitive) to join the " + Team.ToString() + " team.");

              // Add the $VOLUNTEER command
              cg.Commands.ListenTo.Add(new ListenTo(
                  command:"$VOLUNTEER", 
                  listen:true, 
                  registerProfile:true, 
                  callback:OnVolunteer));

              cg.Commands.Listen = true;

              Console.WriteLine("Now listening for volunteers. Press enter to exit.");
              Console.ReadLine();
          }

          private static void OnVolunteer(CommandData commandData)
          {
              for (int i = 0; i &lt; Players.Length; i++)
                  // If the executor is found
                  if (PlayerIdentity.ComparePlayerIdentities(Players[i].Identity, commandData.PlayerIdentity)
                      &amp;&amp; ((Team == PlayerTeam.Blue &amp;&amp; !CustomGame.IsSlotBlue(Players[i].Slot)) || (Team == PlayerTeam.Red &amp;&amp; !CustomGame.IsSlotRed(Players[i].Slot)))
                      )
                  {
                      if (Team == PlayerTeam.Blue)
                          CG.Interact.SwapToBlue(Players[i].Slot);
                      else if (Team == PlayerTeam.Red)
                          CG.Interact.SwapToRed(Players[i].Slot);
                  }
          }

          private static Player[] GetPlayers(CustomGame cg)
          {
              List&lt;int&gt; slotsToGet = cg.GetSlots(SlotFlags.BlueTeam | SlotFlags.RedTeam | SlotFlags.Spectators | SlotFlags.NoAI);
              List&lt;Player&gt; players = new List&lt;Player&gt;();

              for (int i = 0; i &lt; slotsToGet.Count; i++)
                  players.Add(new Player(slotsToGet[i], cg.Commands.GetSlotIdentity(slotsToGet[i])));

              return players.ToArray();
          }

          static CustomGame CG;
          static Player[] Players;
          static PlayerTeam Team;
      }

      class Player
      {
          public Player(int slot, PlayerIdentity identity)
          {
              Slot = slot;
              Identity = identity;
          }
          public int Slot;
          public PlayerIdentity Identity;
      }
      </code>
    </example>
            <seealso cref="F:Deltin.CustomGameAutomation.CustomGame.Commands" />
            <seealso cref="T:Deltin.CustomGameAutomation.ListenTo" />
            <seealso cref="T:Deltin.CustomGameAutomation.CommandData" />
            <seealso cref="T:Deltin.CustomGameAutomation.PlayerIdentity" />
        </member>
        <member name="F:Deltin.CustomGameAutomation.Commands.ListenTo">
            <summary>
            Commands to listen to.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Commands.Listen">
            <summary>
            Set to true to start listening to commands. Set to false to stop.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Commands.GetSlotIdentity(System.Int32)">
            <summary>
            Gets the player identity of a slot.
            </summary>
            <param name="slot">Slot to check.</param>
            <returns>The player identity of the slot.</returns>
        </member>
        <member name="T:Deltin.CustomGameAutomation.ListenTo">
            <summary>
            Data for commands to listen to on the Commands class.
            </summary>
            <seealso cref="T:Deltin.CustomGameAutomation.CommandData"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.ListenTo.#ctor(System.String,System.Boolean,System.Boolean,Deltin.CustomGameAutomation.CommandExecuted)">
            <summary>
            Data for commands to listen to on the Commands class.
            </summary>
            <param name="command">Command to listen to.</param>
            <param name="listen">Should this command be listened to?</param>
            <param name="registerProfile">Should the player who executes this command have their player profile registered?</param>
            <param name="callback">Method to be executed when the command is executed.</param>
        </member>
        <member name="P:Deltin.CustomGameAutomation.ListenTo.Command">
            <summary>
            Command to listen to.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ListenTo.Listen">
            <summary>
            Should this command be listened to?
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ListenTo.RegisterProfile">
            <summary>
            Should the player who executes this command have their profile registered?
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ListenTo.Callback">
            <summary>
            Method to be executed when the command is executed.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Identity.Dispose">
            <summary>
            Disposes data used by the Identity object.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.PlayerIdentity">
            <summary>
            Contains data for identifying players who executed a command.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerIdentity.ComparePlayerIdentities(Deltin.CustomGameAutomation.PlayerIdentity,Deltin.CustomGameAutomation.PlayerIdentity)">
            <summary>
            Returns true if the 2 player identities are identicle.
            </summary>
            <param name="pi1">First player identity</param>
            <param name="pi2">Second player identity</param>
            <returns>Returns true if the player identities are identicle.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerIdentity.ComparePlayerIdentities(Deltin.CustomGameAutomation.PlayerIdentity)">
            <summary>
            Returns true if the 2 player identities are identicle.
            </summary>
            <param name="other">The other PlayerIdentity to compare to.</param>
            <returns>Returns true if the player identities are identicle.</returns>
        </member>
        <member name="T:Deltin.CustomGameAutomation.ChatIdentity">
            <summary>
            Contains data for identifying players who executed a command.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.ChatIdentity.CompareChatIdentities(Deltin.CustomGameAutomation.ChatIdentity,Deltin.CustomGameAutomation.ChatIdentity)">
            <summary>
            Returns true if the 2 player identities are identicle.
            </summary>
            <param name="ci1">First player identity</param>
            <param name="ci2">Second player identity</param>
            <returns>Returns true if the player identities are identicle.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.ChatIdentity.CompareChatIdentities(Deltin.CustomGameAutomation.ChatIdentity)">
            <summary>
            Returns true if the 2 player identities are identicle.
            </summary>
            <param name="other">The other PlayerIdentity to compare to.</param>
            <returns>Returns true if the player identities are identicle.</returns>
        </member>
        <member name="T:Deltin.CustomGameAutomation.CommandData">
            <summary>
            Data of Overwatch executed chat commands.
            </summary>
            <seealso cref="T:Deltin.CustomGameAutomation.ListenTo"/>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CommandData.Command">
            <summary>
            Command player executed.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.CommandData.Channel">
            <summary>
            Channel the command was executed on.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CommandData.PlayerIdentity">
            <summary>
            The identity of the player that executed the command.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.CommandExecuted">
            <summary>
            Method to be executed when the command is executed.
            </summary>
            <param name="data">Data of the command executed.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.OverwatchProcessInfo">
            <summary>
            Data for creating an Overwatch process.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.OverwatchProcessInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Data for creating an Overwatch process.
            </summary>
            <param name="username">Username of the account for the new Overwatch process.</param>
            <param name="password">Password of the account for the new Overwatch process.</param>
            <param name="authenticator">Authenticator number from the Authenticator app. Only required if the account is hooked up to the Blizzard Authenticator app.</param>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.Username">
            <summary>
            Username of the account for the new Overwatch process.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.Password">
            <summary>
            Password of the account for the new Overwatch process.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.Authenticator">
            <summary>
            Authenticator number from the Authenticator app.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.AutomaticallyCreateCustomGame">
            <summary>
            If true, the Overwatch process will automatically create a Custom Game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.CloseOverwatchProcessOnFailure">
            <summary>
            Closes the Overwatch process if it fails to log in.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.OverwatchExecutableFilePath">
            <summary>
            The path to the Overwatch executable.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.OverwatchSettingsFilePath">
            <summary>
            The path to Overwatch's settings file
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.OverwatchProcessInfo.ScreenshotMethod">
            <summary>
            The method that is used to take screenshots of the Overwatch window.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.CustomGameBase">
            <summary>
            Base type for CustomGame interaction members.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.CustomGameBase.#ctor(Deltin.CustomGameAutomation.CustomGame)">
            <summary>
            Base type for CustomGame interaction members.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGameBase.cg">
            <summary>
            The <see cref="T:Deltin.CustomGameAutomation.CustomGame"/> object to use.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.DefaultKeys">
            <summary>
            Overwatch's keybinds.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.DefaultKeys.OpenCustomGameLobbyKey">
            <summary>
            The key used to open the Custom Game lobby. Is Keys.L by default.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.DefaultKeys.OpenChat">
            <summary>
            The key used to open the chat. The default in Overwatch is Enter, but we recommend using Delete. Is Keys.Delete by default.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.CustomGameBuilder">
            <summary>
            CustomGame object builder.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGameBuilder.OverwatchHandle">
            <summary>
            The handle of the Overwatch process to use. Leave at default to use the first Overwatch process found.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGameBuilder.ScreenshotMethod">
            <summary>
            The screenshot method the CustomGame class will use.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGameBuilder.OpenChatIsDefault">
            <summary>
            Determines if the chat should always be opened. Command scanning is more reliable if true.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.CustomGameBuilder.DefaultKeys">
            <summary>
            The default keys set in Overwatch's settings.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Join">
            <summary>
            Options for who can join the game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Join.Everyone">
            <summary>
            Everyone can join the game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Join.FriendsOnly">
            <summary>
            Only friends of the moderator can join the game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Join.InviteOnly">
            <summary>
            Only players invited can join the game.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.GameState">
            <summary>
            Gets the current state of the game.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.GameState.InLobby">
            <summary>
            The custom game is in the lobby.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.GameState.Waiting">
            <summary>
            The custom game is waiting for players.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.GameState.Ingame">
            <summary>
            The custom game is currently ingame.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.GameState.Ending_Commend">
            <summary>
            The custom game is at player commendation.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.GameState.Unknown">
            <summary>
            Cannot recognize what state the game is on.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.ToggleAction">
            <summary>
            Enables/disables settings before toggling them.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ToggleAction.None">
            <summary>
            Do not enable/disable.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ToggleAction.DisableAll">
            <summary>
            Disable all options before toggling.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ToggleAction.EnableAll">
            <summary>
            Enable all options before toggling.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.InvalidSlotException">
            <summary>
            Thrown when slot is invalid or out of range.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.MissingOverwatchProcessException">
            <summary>
            Thrown if an Overwatch process is not found.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.MissingOverwatchProcessException.#ctor(System.String)">
            <summary>
            Throws missing Overwatch process exception.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.InvalidSetheroException">
            <summary>
            Exception for invalid SetHero values.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.InvalidSetheroException.#ctor(System.String)">
            <summary>
            Throws invalid SetHero exception.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.LoginFailedException">
            <summary>
            Thrown when logging into Overwatch using CreateOverwatchProcess fails.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.LoginFailedException.#ctor(System.String)">
            <summary>
            Throws Login Failed Exception.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.GameOverArgs">
            <summary>
            Arguments for the OnGameOver event that is executed when the game ends in Overwatch.
            </summary>
            <seealso cref="E:Deltin.CustomGameAutomation.CustomGame.OnGameOver"/>
        </member>
        <member name="M:Deltin.CustomGameAutomation.GameOverArgs.#ctor(Deltin.CustomGameAutomation.PlayerTeam)">
            <summary>
            Arguments for the OnGameOver event that is executed when the game ends in Overwatch.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.GameOverArgs.GetWinningTeam">
            <summary>
            Gets the team that won the Overwatch game.
            </summary>
            <returns>Returns the team that won the game.</returns>
            <seealso cref="E:Deltin.CustomGameAutomation.CustomGame.OnGameOver"/>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Pause">
            <summary>
            Controls Overwatch's pause feature.
            </summary>
            <remarks>
            The Pause class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.Pause"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Pause.TogglePause">
            <summary>
            Toggle pause.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Pause.PauseGame">
            <summary>
            Pauses the game.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Pause.UnpauseGame">
            <summary>
            Unpauses the game.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Pause.IsPaused">
            <summary>
            Determines if the game is paused.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.PlayerInfo">
            <summary>
            Info about players in an Overwatch custom game.
            </summary>
            <remarks>
            The PlayerInfo class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.PlayerInfo"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.PlayersDead(System.Boolean)">
            <summary>
            Gets a list of players who died.
            </summary>
            <param name="noUpdate"></param>
            <returns>List of players who are dead.</returns>
            <example>
            The code below will award a point to a team if they get a kill.
            <code>
            using System;
            using System.Collections.Generic;
            using System.Threading;
            using Deltin.CustomGameAutomation;
            
            public class PlayersDeadExample
            {
                public static void AwardTeamOnKill(CustomGame cg)
                {
                    bool[] awarded = new bool[12];
                    
                    int redpoints = 0;
                    int bluepoints = 0;
                    
                    while (true)
                    {
                        List&lt;int&gt; playersdead = cg.PlayerInfo.PlayersDead();
                        for (int i = 0; i &lt; 12; i++)
                        {
                            if (playersdead.Contains(i) &amp;&amp; awarded[i] == false)
                            {
                                if (cg.IsSlotBlue(i))
                                {
                                    redpoints++;
                                    Console.WriteLine("Red points: {0}", redpoints);
                                }
                                else if (cg.IsSlotRed(i))
                                {
                                    bluepoints++;
                                    Console.WriteLine("Blue points: {0}", bluepoints);
                                }
                                awarded[i] = true;
                            }
                            else if (playersdead.Contains(i) == false &amp;&amp; awarded[i])
                            {
                                awarded[i] = false;
                            }
                        }
                        Thread.Sleep(500);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.MaxPlayerCount">
            <summary>
            Get max player count for both teams.
            </summary>
            <returns>Returns an int[] where [0] is blue max player count and [1] is red max player count.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.IsHeroChosen(System.Int32)">
            <summary>
            Test if input slot has chosen a hero.
            </summary>
            <param name="slot">Slot to check</param>
            <returns>Returns true if a hero is chosen.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.ModeratorSlot">
            <summary>
            Gets the slot the moderator is on.
            </summary>
            <returns>Slot the moderator is on.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.GetQueueTeam(System.Int32)">
            <summary>
            Gets the team a player in the queue is queueing for.
            </summary>
            <param name="slot">Slot to check.</param>
            <returns>Team that the player is queueing for.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.IsUltimateReady(System.Int32,System.Boolean)">
            <summary>
            Checks if the input slot has their ultimate.
            </summary>
            <param name="slot">Slot to check.</param>
            <param name="noUpdate" />
            <returns>Returns true if player as ultimate.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.GetHeroMarkup(System.Int32,System.String)">
            <summary>
            Obtains the markup of a hero icon.
            </summary>
            <param name="slot">Slot to get hero icon from.</param>
            <param name="saveTo">Location on the file system to save it to.</param>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.GetHero(System.Int32)">
            <summary>
            Gets the hero a player is playing.
            </summary>
            <param name="slot">Slot to check.</param>
            <returns>Returns the hero the slot is playing.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.GetHero(System.Int32,Deltin.CustomGameAutomation.HeroResultInfo@)">
            <summary>
            Gets the hero a player is playing.
            </summary>
            <param name="slot">Slot to check.</param>
            <param name="resultInfo">Info about the returned value.</param>
            <returns>Returns the hero the slot is playing.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.PlayerInfo.PlayerExists(System.String)">
            <summary>
            Checks if a player account exists via battletag. Is case sensitive.
            </summary>
            <param name="battletag">Battletag of player to check. Is case sensitive.</param>
            <returns>Returns true if player exists, else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="battletag"/> is null.</exception>
        </member>
        <member name="T:Deltin.CustomGameAutomation.QueueTeam">
            <summary>
            Teams on the queue.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.QueueTeam.Neutral">
            <summary>
            Queueing for both blue and red.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.QueueTeam.Blue">
            <summary>
            Queueing for blue.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.QueueTeam.Red">
            <summary>
            Queueing for red.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.HeroResultInfo">
            <summary>
            Result info of CG_PlayerInfo.GetHero()
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.HeroResultInfo.Success">
            <summary>
            The hero the player was playing was successfully found.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.HeroResultInfo.PlayerWasDead">
            <summary>
            Can't get the hero the player was playing because the player is dead. Try rescanning when the player is alive again.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.HeroResultInfo.NoHeroChosen">
            <summary>
            The player did not choose a hero.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.HeroResultInfo.SlotEmpty">
            <summary>
            The slot was empty.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.HeroResultInfo.NoCompatibleHeroFound">
            <summary>
            Could not tell what hero the player is playing. Chances are if you get this it is a bug with GetHero().
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.SlotFlags">
            <summary>
            Flags for obtaining slots.
            </summary>
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.GetSlots(Deltin.CustomGameAutomation.SlotFlags)"/>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.BlueTeam">
            <summary>
            Get blue slots.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.RedTeam">
            <summary>
            Get red slots.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.Spectators">
            <summary>
            Get spectator slots.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.NeutralQueue">
            <summary>
            Get neutral queue slots.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.RedQueue">
            <summary>
            Get red queue slots
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.BlueQueue">
            <summary>
            Get blue queue slots
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.Queue">
            <summary>
            Get queue slots
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.NoPlayers">
            <summary>
            No players, only AI.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.NoAI">
            <summary>
            No AI, only players.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SlotFlags.AccurateGetAI">
            <summary>
            Reliably gets the (non)AI, however is a lot slower.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Interact">
            <summary>
            Changes a player's state in Overwatch.
            </summary>
            <remarks>
            The Interact class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.Interact"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.MenuOptionMarkup(System.Int32,System.Int32,System.String,System.Double)">
            <summary>
            Generates a markup for a menu option in Overwatch.
            </summary>
            <param name="slot">Slot to generate markup from.</param>
            <param name="max">Maximum markups to capture.</param>
            <param name="savelocation">Location to save markups.</param>
            <param name="yincrement">Amount to skip on Y axis after every markup capture.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.MenuOptionScan(System.Int32,System.Drawing.Bitmap,System.Int32,System.Int32,System.Double)">
            <summary>
            Scans a player menu for an option.
            </summary>
            <param name="slot">Slot's menu to scan.</param>
            <param name="markup">Bitmap markup of option to scan for.</param>
            <param name="minimumPercent">Minimum percent the markup has to match an option in the menu.</param>
            <param name="max">Maximum options to scan.</param>
            <param name="yincrement">Amount to skip on Y axis after every markup scan.</param>
            <returns>Returns true if the option in the markup has been found, else returns false.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.RemoveFromGame(System.Int32)">
            <summary>
            Removes player from the game
            </summary>
            <param name="slot">Slot to remove from game.</param>
            <returns>Returns true if removing from game was successful</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
            <seealso cref="M:Deltin.CustomGameAutomation.AI.RemoveFromGameIfAI(System.Int32)" />
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapToRed(System.Int32)">
            <summary>
            Swaps player to red team.
            </summary>
            <param name="slot">Slot to swap to red team.</param>
            <returns>Returns true when swapping player to red team is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapToBlue(System.Int32)">
            <summary>
            Swaps player to blue team.
            </summary>
            <param name="slot">Slot to swap to blue team.</param>
            <returns>Returns true when swapping player to blue team is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapTeam(System.Int32)">
            <summary>
            Swaps the team of a player.
            </summary>
            <param name="slot">Slot to swap team.</param>
            <returns>Returns true if swapping team is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapToSpectators(System.Int32)">
            <summary>
            Swaps player to spectator.
            </summary>
            <param name="slot">Slot to swap to spectator.</param>
            <returns>Returns true if swapping to spectators is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapToNeutral(System.Int32)">
            <summary>
            Swaps player in queue to the neutral team.
            </summary>
            <param name="slot">Slot to swap to neutral.</param>
            <returns>Returns true if swapping player to neutral is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.RemoveAllBots(System.Int32)">
            <summary>
            Removes all AI from the game. Input slot must be an AI.
            </summary>
            <param name="slot">Slot of an AI.</param>
            <returns>Returns true if removing all AI is successful.</returns>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if <paramref name="slot" /> is not a valid slot.</exception>
            <remarks>
            <paramref name="slot" /> must be the slot of an AI. If you do not know if the slot will be an AI, use <see cref="M:Deltin.CustomGameAutomation.AI.RemoveAllBotsAuto" />.
            </remarks>
            <seealso cref="M:Deltin.CustomGameAutomation.AI.RemoveAllBotsAuto" />
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.Move(System.Int32,System.Int32)">
            <summary>
            Swap 2 slots with eachother.
            </summary>
            <param name="targetSlot">Target 1</param>
            <param name="destinationSlot">Target 2</param>
            <exception cref="T:Deltin.CustomGameAutomation.InvalidSlotException">Thrown if the <paramref name="targetSlot"/> or <paramref name="destinationSlot"/> argument is out of range of possible slots to move.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Interact.SwapAll">
            <summary>
            Swaps players on both teams.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Map">
            <summary>
            Maps in Overwatch.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Map.GameMode">
            <summary>
            Gamemode of the map.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Map.MapName">
            <summary>
            Name of the map.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Map.GameEvent">
            <summary>
            The Overwatch event the map is on.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Map.MapIDFromName(System.String)">
            <summary>
            Gets map ID from map name.
            </summary>
            <param name="map">Map name.</param>
            <returns>Returns the map ID.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Map.MapNameFromID(Deltin.CustomGameAutomation.Map)">
            <summary>
            Gets map name from map ID.
            </summary>
            <param name="map">Map ID.</param>
            <returns>Returns map name.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Map.GetMaps">
            <summary>
            Gets all maps.
            </summary>
            <returns>Returns all maps.</returns>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Map.GetMapsInGamemode(Deltin.CustomGameAutomation.Gamemode,Deltin.CustomGameAutomation.Event)">
            <summary>
            Gets all maps in a gamemode.
            </summary>
            <param name="gamemode">The gamemode to get the maps from.</param>
            <param name="owEvent">Filter by Overwatch event.</param>
            <returns>An array of maps in the <paramref name="gamemode"/>.</returns>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Event">
            <summary>
            Overwatch's limited time events.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Gamemode">
            <summary>
            Overwatch's gamemodes.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.ModesEnabled">
            <summary>
            Overwatch gamemodes that are enabled.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.ScreenshotMethod">
            <summary>
            The screenshot method used to capture the Overwatch window screen.
            BitBlt is faster and works even if another window is over the Overwatch window.
            If BitBlt does not work for you, use ScreenCopy.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ScreenshotMethod.BitBlt">
            <summary>
            The BitBlt method of screen capturing.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.ScreenshotMethod.ScreenCopy">
            <summary>
            The ScreenCopy method of screen capturing.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. 
            If the window is minimized or maximized, the system restores it to its original size and position. 
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. 
            This value is similar to SW_SHOWNORMAL, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. 
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. 
            This value is similar to SW_SHOW, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_RESTORE">
            <summary>
            Activates and displays the window. 
            If the window is minimized or maximized, the system restores it to its original size and position. 
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.User32.nCmdShow.SW_FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. 
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.Gdi32.TernaryRasterOperations.CAPTUREBLT">
            <summary>
            Capture window as seen on screen.  This includes layered windows 
            such as WPF windows with AllowsTransparency="true"
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.ana_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.bastion_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.brigitte_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.doomfist_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.dva_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.easy_difficulty">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.gengi_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.hanzo_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.hard_difficulty">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.hero_settings">
             <summary>
               Looks up a localized string similar to -General
            
            ability_cooldown_time value
            quick_melee toggle
            ultimate_ability toggle
            ultimate_generation value
            ultimate_generation_combat value
            ultimate_generation_passive value
            spawn_with_ultimate_ready toggle
            ultimate_duration value
            infinite_ultimate_duration toggle
            
            damage_dealt value
            damage_recieved value
            healing_dealt value
            healing_recieved value
            health value
            jump_vertical_speed value
            movement_gravity value
            movement_speed value
            projectile_gravity value
            projectile_speed value
            recieve_h [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.junkrat_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.lucio_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.mccree_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.medium_difficulty">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.mei_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.mercy_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.moira_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.orisa_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.pharah_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.put_in_queue">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.reaper_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.reinhardt_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.remove_all_bots">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.remove_from_game">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.roadhog_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.soldier_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.sombra_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.spectate_all">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.spectate_blue_only">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.spectate_red_only">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.swap_to_blue">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.swap_to_neutral_team">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.swap_to_red">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.swap_to_spectators">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.symmetra_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.torbjorn_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.tracer_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.view_career_profile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.widowmaker_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.winston_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.wreckingball_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.zarya_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Deltin.CustomGameAutomation.Properties.Resources.zenyatta_markup">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.SetHero">
            <summary>
            Data to change hero settings.
            </summary>
            <seealso cref="M:Deltin.CustomGameAutomation.CustomGame.SetHeroSettings(Deltin.CustomGameAutomation.SetHero[])"/>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SetHero.Hero">
            <summary>
            Hero to change settings for. Set to null for general settings.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SetHero.Team">
            <summary>
            Team to change hero settings for.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SetHero.Set">
            <summary>
            Array of settings to change. Must be the same size as setto.
            </summary>
        </member>
        <member name="F:Deltin.CustomGameAutomation.SetHero.SetTo">
            <summary>
            Array to change settings to. Must be the same size as set.
            </summary>
        </member>
        <member name="M:Deltin.CustomGameAutomation.SetHero.#ctor(System.Nullable{Deltin.CustomGameAutomation.Hero},Deltin.CustomGameAutomation.BotTeam,System.String[],System.Object[])">
            <summary>
            
            </summary>
            <param name="hero">Hero to change settings for. Set to null for general settings.</param>
            <param name="team">Team to change hero settings for.</param>
            <param name="set">Array of settings to change. Must be the same size as setto.</param>
            <param name="setto">Array to change settings to. Must be the same size as set.</param>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Hero">
            <summary>
            All heroes in Overwatch.
            </summary>
        </member>
        <member name="T:Deltin.CustomGameAutomation.Settings">
            <summary>
            Custom Game settings in Overwatch.
            </summary>
            <remarks>
            The Settings class is accessed in a CustomGame object on the <see cref="F:Deltin.CustomGameAutomation.CustomGame.Settings"/> field.
            </remarks>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.LoadPreset(System.Int32,System.Int32)">
            <summary>
            Loads a preset saved in Overwatch.
            </summary>
            <param name="preset">Preset to load. 0 is the first preset</param>
            <param name="maxWaitTime">Maximum time to wait for the preset to show up.</param>
            <returns>Returns true if selecting the preset was successful.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if <paramref name="preset"/> is less than 0.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.SetNumPresets(System.Int32)">
            <summary>
            Informs library of total number of saved presets. 
            May make preset loading faster or more accurate.
            </summary>
            <param name="num">Number of saved presets the host has.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.SetJoinSetting(Deltin.CustomGameAutomation.Join)">
            <summary>
            Changes who can join.
            </summary>
            <param name="setting">Join setting to select.</param>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.SetGameName(System.String)">
            <summary>
            Changes the custom game's name.
            </summary>
            <param name="name">Name to change game name to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="name"/> is less than 3 characters or greater than 64 characters.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> has the text "admin" in it.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.SetTeamName(Deltin.CustomGameAutomation.PlayerTeam,System.String)">
            <summary>
            Changes a team's name.
            </summary>
            <param name="team">Team to change name.</param>
            <param name="name">Name to change team's name to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="name"/> is less than 1 character or greater than 15 characters.</exception>
            <exception cref="T:System.ArgumentException">Thown if <paramref name="name"/> has the text "admin" in it.</exception>
        </member>
        <member name="M:Deltin.CustomGameAutomation.Settings.SetMaxPlayers(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the max player count for blue team, red team, free for all, or spectators.
            </summary>
            <param name="blueCount">Maximum number of blue players. Must be in the range of 1-6. Set to null to ignore.</param>
            <param name="redCount">Maximum number of red players. Must be in the range of 1-6. Set to null to ignore.</param>
            <param name="ffaCount">Maximum number of FFA players. Must be in the range of 1-12. Set to null to ignore.</param>
            <param name="spectatorCount">Maximum number of spectators. Must be in the range of 0-12. Set to null to ignore.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="blueCount"/>, <paramref name="redCount"/>, <paramref name="ffaCount"/>, or <paramref name="spectatorCount"/> is less than 0 or greater than their max values.</exception>
        </member>
    </members>
</doc>
